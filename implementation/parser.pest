// ========== Operators ==========

prefix_op = _{
    prefix_typeof
  | prefix_not
  | prefix_neg
  | prefix_yield
}

prefix_typeof = { "typeof" }
prefix_not    = { "!" }
prefix_neg    = { "-" }
prefix_yield  = { "<-" }

infix_op          = _{
    infix_add
  | infix_sub
  | infix_mul
  | infix_div
  | infix_mod
  | infix_eq
  | infix_neq
  | infix_le
  | infix_ge
  | infix_lt
  | infix_gt
  | infix_and
  | infix_or
  | infix_function
  | infix_assign
  | infix_assign_slot
}

infix_add         =  { "+" }
infix_sub         =  { "-" }
infix_mul         =  { "*" }
infix_div         =  { "/" }
infix_mod         =  { "%" }
infix_eq          =  { "==" }
infix_neq         =  { "!=" }
infix_le          =  { "<=" }
infix_ge          =  { ">=" }
infix_lt          =  { "<" }
infix_gt          =  { ">" }
infix_and         =  { "&&" }
infix_or          =  { "||" }
infix_function    =  { "`" ~ prop_id ~ "`" }
infix_assign      =  { "=" }
infix_assign_slot =  { "::=" }

postfix_op   = _{
    postfix_bang
}
postfix_bang =  { "!" ~ !"=" }

// ---------- end of operators ----------

magic_fn_id = {
    "(+)"
  | "(-)"
  | "(*)"
  | "(/)"
  | "(%)"
  | "(|)"
  | "(&)"
  | "(==)"
  | "(!=)"
  | "(<=)"
  | "(>=)"
  | "(<)"
  | "(>)"
  | "(!)"
  | "(-)"
}

chainable_operator = {
    index
  | app
  | access
}

idref   =  { prop_id }
prop_id = @{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }

index  = { "[" ~ expr ~ "]" }
access = { "." ~ prop_id }

primary_expr      = {
    boolean_if
  | chainable_expr
}
boolean_if        = { chainable_operand ~ "?" ~ expr ~ ":" ~ expr }
chainable_expr    = { chainable_operand ~ chainable_operator* }
chainable_operand = {
    idref
  | block // object_cast
  // | enum_cast
  // | enum_switch
  // | try_catch
  // | await_multi_expr
  // | await_lambda_expr
  // | await_expr

  | lambda_expr // | new_expr
  // | paren_expr
  // | string
  // | multiline_string
  // | bigint
  // | number
  // | boolean_false
  // | boolean_true
  // | object_literal
  // | enum_variant
  // | array_literal
  // | map_literal
  // | hole
  // | tt
  // |
}

lambda_expr = { "\\" ~ (prop_id ~ (" "+ ~ prop_id)*)? ~ implicit_params? ~ "->" ~ expr }

next_stmt = _{ ";" | "\n" }

implicit_params = { "?" ~ prop_id ~ (" "+ ~ prop_id)* }

app = { access? ~ (WHITE_SPACE+ ~ expr)+ }

expr = { prefix_op? ~ primary_expr ~ postfix_op? ~ (infix_op ~ prefix_op? ~ primary_expr ~ postfix_op?)* }

block = { "{" ~ expr ~ (next_stmt+ ~ expr)* ~ "}" }
